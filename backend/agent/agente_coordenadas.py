#!/usr/bin/env python3
"""
Agente CrewAI Simplificado - Solo 2 Agentes especializados
Versi√≥n optimizada para Madrid con Rat√≥n P√©rez
"""

from email.policy import default
import os
import sys
import requests
from bs4 import BeautifulSoup
from urllib.parse import quote_plus
import warnings
import json
import hashlib
from datetime import datetime
warnings.filterwarnings("ignore")

# Configuraci√≥n de variables de entorno
from dotenv import load_dotenv
load_dotenv()

# Imports principales
from crewai.llm import LLM
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from crewai import Agent, Task, Crew, Process
from crewai.tools import BaseTool
from typing import Type
from pydantic import BaseModel, Field

# Mapa para traducir los c√≥digos de la WMO a descripciones en espa√±ol
WEATHER_CODES = {
    0: "Cielo despejado",
    1: "Principalmente despejado",
    2: "Parcialmente nublado",
    3: "Nublado",
    45: "Niebla",
    48: "Niebla con hielo",
    51: "Llovizna ligera",
    53: "Llovizna moderada",
    55: "Llovizna densa",
    61: "Lluvia ligera",
    63: "Lluvia moderada",
    65: "Lluvia fuerte",
    66: "Lluvia helada ligera",
    67: "Lluvia helada fuerte",
    71: "Nieve ligera",
    73: "Nieve moderada",
    75: "Nieve fuerte",
    80: "Chubascos ligeros",
    81: "Chubascos moderados",
    82: "Chubascos violentos",
    85: "Chubascos de nieve ligeros",
    86: "Chubascos de nieve fuertes",
    95: "Tormenta el√©ctrica",
    96: "Tormenta el√©ctrica con granizo ligero",
    99: "Tormenta el√©ctrica con granizo fuerte"
}

# Definir herramientas especializadas
class MadridPDFSearchInput(BaseModel):
    """Input para b√∫squeda en PDFs de Madrid"""
    query: str = Field(description="Consulta para buscar en los PDFs de Madrid")

class MadridPDFSearchTool(BaseTool):
    name: str = "madrid_pdf_search"
    description: str = "Busca informaci√≥n espec√≠fica en los PDFs oficiales de Madrid sobre turismo, historia y cultura"
    args_schema: Type[BaseModel] = MadridPDFSearchInput
    
    def _run(self, query: str) -> str:
        return "Herramienta de b√∫squeda en PDFs configurada din√°micamente"

class InternetSearchInput(BaseModel):
    """Input para b√∫squeda en Internet"""
    query: str = Field(description="Consulta para buscar informaci√≥n en Internet")

class InternetSearchTool(BaseTool):
    name: str = "internet_search"
    description: str = "Busca informaci√≥n actualizada en Internet sobre Madrid, turismo y actividades"
    args_schema: Type[BaseModel] = InternetSearchInput
    
    def _run(self, query: str) -> str:
        return buscar_en_internet(query)

class LocationSearchInput(BaseModel):
    """Input para b√∫squeda de lugares cercanos"""
    lat: float = Field(description="Latitud")
    lon: float = Field(description="Longitud")
    radius_km: float = Field(default=1.0, description="Radio de b√∫squeda en kil√≥metros")
    category: str = Field(default="turismo", description="Categor√≠a de lugares a buscar")

class LocationSearchTool(BaseTool):
    name: str = "location_search"
    description: str = "Busca lugares cercanos usando coordenadas GPS y OpenStreetMap"
    args_schema: Type[BaseModel] = LocationSearchInput
    
    def _run(self, lat: float, lon: float, radius_km: float = 1.0, category: str = "turismo") -> str:
        radius_meters = int(radius_km * 1000)
        return buscar_lugares_openstreetmap(lat, lon, radius_meters, category)
    
class WeatherSearchInput(BaseModel):
    """Input para la obtenci√≥n de la previsi√≥n del tiempo"""
    latitude: float = Field(description="Latitud")
    longitude: float = Field(description="Longitud")
    forecast_days: int = Field(default=3, description="N√∫mero de d√≠as")
    
class WeatherSearchTool(BaseModel):
    name: str = "weather_search"
    description: str = "Obtiene la previsi√≥n del tiempo usando coordenadas GPS y Open-Meteo"
    args_schema: Type[BaseModel] =WeatherSearchInput
    
    def _run(self, latitude: float, longitude: float, forecast_days: int):
        return get_weather_forecast(latitude, longitude, forecast_days)

def crear_llm_gemini():
    """Configura el LLM Gemini para CrewAI usando litellm"""
    try:
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY no encontrada en variables de entorno")
        
        os.environ["GEMINI_API_KEY"] = api_key
        
        llm = LLM(
            model="gemini/gemini-1.5-flash",
            api_key=api_key,
            temperature=0.7
        )
        
        print("‚úÖ LLM Gemini configurado correctamente para CrewAI")
        return llm
    except Exception as e:
        print(f"‚ùå Error configurando Gemini: {e}")
        return None

def cargar_vectorstore():
    """Carga el vectorstore desde cache o crea uno nuevo"""
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        cache_dir = os.path.join(current_dir, "..", "vectorstore_cache")
        
        if os.path.exists(os.path.join(cache_dir, "index.faiss")):
            print("üìö Cargando vectorstore desde cache...")
            embeddings = HuggingFaceEmbeddings(
                model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
            )
            vectorstore = FAISS.load_local(cache_dir, embeddings, allow_dangerous_deserialization=True)
            print("‚úÖ Vectorstore cargado desde cache")
            return vectorstore
        else:
            print("‚ùå Cache no encontrado, necesita crear vectorstore")
            return None
    except Exception as e:
        print(f"‚ùå Error cargando vectorstore: {e}")
        return None

def buscar_en_pdfs(vectorstore, query, k=5):
    """Busca informaci√≥n en el vectorstore de PDFs de Madrid"""
    try:
        if not vectorstore:
            return "‚ùå Vectorstore no disponible"
        
        docs = vectorstore.similarity_search(query, k=k)
        
        resultados = []
        for i, doc in enumerate(docs, 1):
            content = doc.page_content[:500]
            source = doc.metadata.get('source', 'Fuente desconocida')
            resultados.append(f"üìÑ **Resultado {i}** ({os.path.basename(source)}):\n{content}\n")
        
        return "\n".join(resultados) if resultados else "No se encontr√≥ informaci√≥n relevante en los PDFs."
        
    except Exception as e:
        return f"‚ùå Error en b√∫squeda de PDFs: {e}"

def buscar_en_internet(query, max_results=3):
    """Busca informaci√≥n actualizada en Internet sobre Madrid"""
    try:
        query_encoded = quote_plus(f"{query} Madrid turismo 2024")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        url = f"https://www.google.com/search?q={query_encoded}&num={max_results}"
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            results = []
            
            # Buscar resultados de b√∫squeda
            for i, item in enumerate(soup.find_all('div', class_='g')[:max_results], 1):
                title_elem = item.find('h3')
                snippet_elem = item.find('span', {'data-ved': True})
                
                if title_elem and snippet_elem:
                    title = title_elem.get_text()
                    snippet = snippet_elem.get_text()
                    results.append(f"üåê **Resultado {i}**: {title}\n{snippet}\n")
            
            if results:
                return "\n".join(results)
        
        # Informaci√≥n de fallback para lugares famosos de Madrid
        fallback_info = get_madrid_fallback_info(query)
        if fallback_info:
            return f"üìö **Informaci√≥n disponible sobre Madrid:**\n{fallback_info}"
        else:
            return "‚ùå No se pudo acceder a la informaci√≥n de internet"
            
    except Exception as e:
        # Informaci√≥n de fallback en caso de error
        fallback_info = get_madrid_fallback_info(query)
        if fallback_info:
            return f"üìö **Informaci√≥n disponible sobre Madrid:**\n{fallback_info}"
        else:
            return f"‚ùå Error en b√∫squeda de internet: {e}"

def get_madrid_fallback_info(query):
    """Proporciona informaci√≥n b√°sica sobre lugares famosos de Madrid"""
    query_lower = query.lower()
    
    madrid_info = {
        "puerta del sol": """
        üèõÔ∏è **Puerta del Sol - El Coraz√≥n de Madrid**

        **Historia:**
        - Plaza desde el siglo XV, originalmente una de las puertas de la muralla medieval
        - Kil√≥metro 0 de las carreteras radiales espa√±olas
        - Lugar hist√≥rico de celebraciones y manifestaciones importantes

        **Atractivos principales:**
        - Reloj de la Casa de Correos (campanadas de A√±o Nuevo)
        - Estatua del Oso y el Madro√±o (escudo de Madrid)
        - Kil√≥metro 0 marcado en el suelo
        - Tiendas y cafeter√≠as hist√≥ricas

        **Informaci√≥n pr√°ctica:**
        - Acceso: Metro Sol (l√≠neas 1, 2 y 3)
        - Horario: Acceso libre 24 horas
        - Mejores momentos: Ma√±ana temprano o tarde-noche
        """,
                
                "parque del retiro": """
        üå≥ **Parque del Retiro - El Pulm√≥n Verde de Madrid**

        **Historia:**
        - Creado en el siglo XVII para recreo de la realeza
        - Abierto al p√∫blico en 1868
        - 125 hect√°reas de jardines y monumentos

        **Atractivos principales:**
        - Palacio de Cristal (1887)
        - Estanque Grande con barcas de remo
        - Rosaleda y Jard√≠n de Vivaces
        - M√∫ltiples monumentos y esculturas

        **Informaci√≥n pr√°ctica:**
        - Acceso: Metro Retiro, Pr√≠ncipe de Vergara
        - Horario: 6:00-24:00 (horario variable seg√∫n √©poca)
        - Entrada: Gratuita
        """,
                
                "museo del prado": """
        üé® **Museo del Prado - Tesoro Art√≠stico Mundial**

        **Historia:**
        - Inaugurado en 1819
        - Una de las pinacotecas m√°s importantes del mundo
        - M√°s de 8.000 pinturas y 1.000 esculturas

        **Atractivos principales:**
        - Obras de Vel√°zquez, Goya, El Greco
        - Las Meninas, Las Pinturas Negras
        - Colecci√≥n de pintura espa√±ola, italiana y flamenca

        **Informaci√≥n pr√°ctica:**
        - Acceso: Metro Banco de Espa√±a, Atocha
        - Horario: 10:00-20:00 (lunes a s√°bado), 10:00-19:00 (domingos)
        - Entrada: 15‚Ç¨ adultos, gratis √∫ltima hora
        """,
                
                "palacio real": """
        üëë **Palacio Real - Residencia de la Realeza**

        **Historia:**
        - Construido en el siglo XVIII sobre el antiguo Alc√°zar
        - Residencia oficial de los Reyes de Espa√±a
        - 3.418 habitaciones, una de las m√°s grandes de Europa

        **Atractivos principales:**
        - Sal√≥n del Trono y Sala de Gasparini
        - Armer√≠a Real y Farmacia Real
        - Jardines de Sabatini y Campo del Moro

        **Informaci√≥n pr√°ctica:**
        - Acceso: Metro √ìpera
        - Horario: 10:00-18:00 (verano hasta 19:00)
        - Entrada: 13‚Ç¨ adultos, reducida para familias
        """
    }
    
    # Buscar coincidencias en la query
    for lugar, info in madrid_info.items():
        if any(palabra in query_lower for palabra in lugar.split()):
            return info
    
    # Informaci√≥n general si no encuentra lugar espec√≠fico
    if any(word in query_lower for word in ["madrid", "turismo", "ver", "visitar"]):
        return """
            üèôÔ∏è **Madrid - Capital de Espa√±a**

            **Lugares imprescindibles:**
            - Puerta del Sol (centro neur√°lgico)
            - Parque del Retiro (naturaleza en la ciudad)
            - Museo del Prado (arte mundial)
            - Palacio Real (historia y arquitectura)
            - Gran V√≠a (shopping y espect√°culos)
            - Mercado de San Miguel (gastronom√≠a)

            **Consejos pr√°cticos:**
            - Metro: Mejor transporte p√∫blico
            - Horarios: Museos cierran los lunes
            - Comidas: 14:00-16:00 y 21:00-23:00
            - Propinas: 5-10% en restaurantes
            """
    
    return None

def buscar_lugares_openstreetmap(lat, lon, radius_meters=1000, category="tourism"):
    """Busca lugares cercanos usando la API de OpenStreetMap"""
    try:
        # Mapear categor√≠as a tags de OSM
        tag_mapping = {
            'turismo': 'tourism',
            'museo': 'tourism=museum',
            'restaurante': 'amenity=restaurant',
            'hotel': 'tourism=hotel',
            'parque': 'leisure=park',
            'shopping': 'shop',
            'entretenimiento': 'amenity=cinema|amenity=theatre',
            'cultura': 'tourism=museum|tourism=gallery'
        }
        
        osm_tag = tag_mapping.get(category.lower(), 'tourism')
        
        # Construir consulta Overpass
        overpass_query = f"""
        [out:json][timeout:25];
        (
          node[{osm_tag}](around:{radius_meters},{lat},{lon});
          way[{osm_tag}](around:{radius_meters},{lat},{lon});
          relation[{osm_tag}](around:{radius_meters},{lat},{lon});
        );
        out center meta;
        """
        
        url = "https://overpass-api.de/api/interpreter"
        response = requests.post(url, data=overpass_query, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            elementos = data.get('elements', [])
            
            if not elementos:
                return f"No se encontraron lugares de tipo '{category}' en un radio de {radius_meters/1000}km"
            
            # Procesar resultados
            lugares = []
            for elemento in elementos[:10]:  # Limitar a 10 resultados
                tags = elemento.get('tags', {})
                nombre = tags.get('name', 'Sin nombre')
                
                if nombre == 'Sin nombre':
                    continue
                
                # Informaci√≥n adicional
                direccion = tags.get('addr:street', '')
                if tags.get('addr:housenumber'):
                    direccion += f" {tags.get('addr:housenumber')}"
                
                descripcion = tags.get('description', '')
                website = tags.get('website', '')
                
                lugar_info = f"üìç **{nombre}**"
                if direccion:
                    lugar_info += f"\n   üìç {direccion}"
                if descripcion:
                    lugar_info += f"\n   üìù {descripcion[:100]}..."
                if website:
                    lugar_info += f"\n   üåê {website}"
                
                lugares.append(lugar_info)
            
            return "\n\n".join(lugares) if lugares else f"No se encontraron lugares con nombre en la categor√≠a '{category}'"
        else:
            return f"‚ùå Error en consulta a OpenStreetMap: {response.status_code}"
            
    except Exception as e:
        return f"‚ùå Error buscando lugares: {e}"
    
def get_weather_forecast_json(latitude: float, longitude: float, forecast_days: int = 3):
    """
    Obtiene la previsi√≥n del tiempo para los pr√≥ximos d√≠as.

    Args:
        latitude (float): La latitud de la ubicaci√≥n.
        longitude (float): La longitud de la ubicaci√≥n.
        forecast_days (int): El n√∫mero de d√≠as para la previsi√≥n.

    Returns:
        list: Una lista de diccionarios con el pron√≥stico del tiempo.
    """
    url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&daily=temperature_2m_max,temperature_2m_min,weather_code&timezone=Europe%2FMadrid&forecast_days={forecast_days}"
    
    try:
        response = requests.get(url)
                
        return response
    except requests.exceptions.RequestException as e:
        return None
    
def get_weather_forecast(latitude: float, longitude: float, forecast_days: int = 3):
    """
    Obtiene la previsi√≥n del tiempo para los pr√≥ximos d√≠as.

    Args:
        latitude (float): La latitud de la ubicaci√≥n.
        longitude (float): La longitud de la ubicaci√≥n.
        forecast_days (int): El n√∫mero de d√≠as para la previsi√≥n.

    Returns:
        list: Una lista de diccionarios con el pron√≥stico del tiempo.
    """
    
    response = get_weather_forecast_json(latitude, longitude, forecast_days)
    data = response.json()    

    if data:
        # Extraer los datos relevantes
        daily_data = data.get("daily", {})
        forecast = []

        if daily_data:
            for i in range(len(daily_data["time"])):
                weather_code = daily_data["weather_code"][i]

                # Convertir la cadena de fecha a un objeto datetime
                date_obj = datetime.strptime(daily_data['time'][i], "%Y-%m-%d")
                # Formatear la fecha en espa√±ol
                formatted_date = date_obj.strftime("%A %d de %B")

                info = f"üìà **Fecha: {formatted_date.capitalize()}**n\n"
                info += f"    \n"
                info += f"    M√°x. Temp: {daily_data['temperature_2m_max'][i]} ¬∞C\n"
                info += f"    M√≠n. Temp: {daily_data['temperature_2m_min'][i]} ¬∞C\n"
                info += f"    Condici√≥n: {WEATHER_CODES.get(weather_code, 'Condici√≥n desconocida')}\n"

                forecast.append(info)
                
        return forecast if forecast else "No se ha encontrado la previsi√≥n del tiempo."
    else:
        return f"‚ùå Error en consulta a Open-Meteo: {response.status_code}"

def main(user_query, llm, vectorstore, lat=None, lon=None, radio_km=1.0, 
         categoria_foursquare="turismo", infantil=False, adulto=False, accesibilidad=False):
    """
    Funci√≥n principal con 2 agentes especializados CrewAI
    """
    print(f"\nüîç Procesando consulta: {user_query}")
    if infantil:
        user_query += " actividades para ni√±os"
    if adulto:  
        user_query += " actividades para ni√±os y adolecentes"
    if accesibilidad:
        user_query += " accesibilidad para personas con movilidad reducida"

    
    # Crear herramientas especializadas
    pdf_search_tool = MadridPDFSearchTool()
    # Configurar la herramienta PDF con el vectorstore actual
    def pdf_search_with_context(query: str) -> str:
        return buscar_en_pdfs(vectorstore, query)
    pdf_search_tool._run = pdf_search_with_context

    internet_search_tool = InternetSearchTool()
    location_search_tool = LocationSearchTool()
    weather_search_tool = WeatherSearchTool()

    # AGENTE 1: Investigador Cultural de Madrid (Historia + Informaci√≥n actual)
    madrid_researcher = Agent(
        role="Investigador Cultural de Madrid",
        goal="Recopilar informaci√≥n hist√≥rica, cultural y pr√°ctica sobre Madrid. Combinar datos de archivos oficiales, PDFs especializados e informaci√≥n actualizada de internet para crear una base s√≥lida de conocimiento verificable.",
        backstory="""Soy la Dra. Elena Vega, historiadora y investigadora cultural especializada en Madrid. 
        Trabajo para Madrid Destino y colaboro con el Archivo de Villa. Durante 20 a√±os he documentado 
        la evoluci√≥n de la ciudad, desde sus or√≠genes √°rabes hasta la actualidad. Mi especialidad es 
        conectar el pasado hist√≥rico con el presente vibrante de Madrid, encontrando las historias 
        humanas que hacen √∫nicos los lugares. Tengo acceso privilegiado a archivos hist√≥ricos y 
        mantengo una red de contactos locales que me proporcionan informaci√≥n actualizada.""",
        llm=llm,
        verbose=True,
        allow_delegation=False,
        max_iter=1,
        memory=False,
        tools=[pdf_search_tool, internet_search_tool, location_search_tool]
    )

    # AGENTE 2: Creador de Experiencias Familiares (Rat√≥n P√©rez + Actividades)
    family_guide_creator = Agent(
        role="Creador de Experiencias Familiares del Raton Perez",
        goal="Transformar informaci√≥n hist√≥rica y cultural en experiencias familiares memorables protagonizadas por el Rat√≥n P√©rez. Crear narrativas m√°gicas, dise√±ar actividades interactivas y proporcionar consejos pr√°cticos para familias multigeneracionales.",
        backstory="""¬°Hola! Soy Carmen P√©rez, y trabajo directamente con el mism√≠simo Rat√≥n P√©rez desde hace a√±os. 
        Soy pedagoga especializada en turismo familiar y storytelling. Junto con Ratoncito, hemos creado 
        m√°s de 100 aventuras m√°gicas en Madrid, combinando metodolog√≠as educativas innovadoras con narrativas 
        fant√°sticas. Mi don especial es hablar el 'idioma' tanto de ni√±os como de adultos, creando momentos 
        donde todos se sienten protagonistas. Conozco cada rinc√≥n child-friendly de Madrid y s√© exactamente 
        d√≥nde est√°n los mejores helados despu√©s de una aventura cultural.""",
        llm=llm,
        verbose=True,
        allow_delegation=False,
        max_iter=1,
        memory=False,
        tools=[location_search_tool]
    )

    # TAREA 1: Investigaci√≥n Cultural Completa
    research_task = Task(
        description=(
            f"INVESTIGACI√ìN CULTURAL COMPLETA sobre: {user_query}\n\n"
            f"OBJETIVOS:\n"
            f"1. Recopilar informaci√≥n hist√≥rica precisa: fechas, personajes, eventos\n"
            f"2. Buscar datos pr√°cticos actualizados: horarios, precios, accesibilidad\n"
            f"3. Identificar curiosidades y an√©cdotas verificables\n"
            f"4. Localizar lugares cercanos de inter√©s (si hay coordenadas: {lat}, {lon})\n"
            f"5. Obtener informaci√≥n de transporte y log√≠stica\n\n"
            f"FUENTES A UTILIZAR:\n"
            f"- PDFs oficiales de Madrid (archivo especializado)\n"
            f"- Internet para informaci√≥n actualizada\n"
            f"- OpenStreetMap para lugares cercanos\n\n"
            f"Proporciona informaci√≥n s√≥lida y verificable que ser√° la base para la experiencia familiar."
        ),
        expected_output="Documento estructurado en Markdown con: 1) Informaci√≥n hist√≥rica verificada, 2) Datos pr√°cticos actualizados, 3) Curiosidades interesantes, 4) Lugares cercanos relevantes, 5) Informaci√≥n de transporte y log√≠stica. Que no supere las 500 palabras.",
        agent=madrid_researcher,
        tools=[pdf_search_tool, internet_search_tool, location_search_tool]
    )

    # TAREA 2: Creaci√≥n de Experiencia Familiar con el Rat√≥n P√©rez
    family_experience_task = Task(
        description=(
            f"CREAR EXPERIENCIA FAMILIAR M√ÅGICA basada en la investigaci√≥n sobre: {user_query}\n\n"
            f"OBJETIVOS:\n"
            f"1. Transformar datos hist√≥ricos en narrativa del Rat√≥n P√©rez\n"
            f"2. Dise√±ar 2-3 actividades interactivas para diferentes edades\n"
            f"3. Crear un acertijo o b√∫squeda del tesoro relacionada\n"
            f"4. Proporcionar consejos pr√°cticos para familias\n"
            f"5. Incluir recomendaciones de horarios y presupuesto\n\n"
            f"ELEMENTOS REQUERIDOS:\n"
            f"- Historia protagonizada por el Rat√≥n P√©rez en primera persona\n"
            f"- Actividades para ni√±os (6-12 a√±os) y adolescentes\n"
            f"- Acertijo con pistas y soluci√≥n\n"
            f"- Consejos de vestimenta y equipamiento\n"
            f"- Momentos fotogr√°ficos especiales\n"
            f"- Informaci√≥n sobre lugares cercanos para comer/descansar"
        ),
        expected_output="Gu√≠a familiar completa en formato Markdown con: 1) Historia narrada por el Rat√≥n P√©rez en primera persona, 2) Actividades interactivas paso a paso, 3) Acertijo con pistas y soluci√≥n, 4) Consejos pr√°cticos completos",
        agent=family_guide_creator,
        tools=[location_search_tool],
        context=[research_task]  # Depende de la investigaci√≥n
    )
    
    # Crear crew simplificado con 2 agentes
    crew = Crew(
        agents=[madrid_researcher, family_guide_creator],
        tasks=[research_task, family_experience_task],
        process=Process.sequential,
        verbose=True,
        memory=False  # Desactivar memoria para evitar problemas
    )
    
    print("\n" + "="*80)
    print("üéØ EJECUTANDO GU√çA TUR√çSTICA DE MADRID")
    print("ü§ñ 2 Agentes CrewAI especializados + Rat√≥n P√©rez")
    fuentes = "üìö PDFs + üåê Internet + üó∫Ô∏è OpenStreetMap"
    if lat and lon:
        fuentes += f" (Coordenadas: {lat}, {lon})"
    print(fuentes)
    print("="*80)
    
    # Ejecutar crew
     
    resumen = crew.kickoff()
    print("\n" + "="*80)
    print("üéâ MINI-GU√çA GENERADA")
    print("="*80)
    print(resumen)
    # Guardar solo la versi√≥n corta
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        backend_dir = os.path.join(current_dir, "..")
        output_file = os.path.join(backend_dir, "guia_madrid_resumida.md")
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(f"# Mini-Gu√≠a Tur√≠stica de Madrid - Rat√≥n P√©rez\n\n")
            f.write(f"**Consulta:** {user_query}\n\n")
            if lat and lon:
                f.write(f"**Coordenadas:** {lat}, {lon} (Radio: {radio_km}km)\n\n")
            f.write(f"**Generado por:** 2 Agentes CrewAI especializados\n")
            f.write(f"**Fecha:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"---\n\n{resumen}")
        print(f"‚úÖ Mini-gu√≠a guardada en: {output_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error guardando archivo: {e}")
    return resumen


def inicializar_vectorstore():
    """Funci√≥n de compatibilidad para inicializar vectorstore (alias de cargar_vectorstore)"""
    return cargar_vectorstore()

def openstreetmap(lat=40.4170, lon=-3.7036, radius_km=1.0, category="turismo"):
    """
    Funci√≥n para OpenStreetMap
    Busca lugares cercanos usando las coordenadas proporcionadas
    """
    try:
        radius_meters = int(radius_km * 1000)
        resultado = buscar_lugares_openstreetmap(lat, lon, radius_meters, category)
        
        print(f"\nüó∫Ô∏è OPENSTREETMAP")
        print(f"üìç Coordenadas: {lat}, {lon}")
        print(f"üìè Radio: {radius_km}km")
        print(f"üè∑Ô∏è Categor√≠a: {category}")
        print("="*50)
        print(resultado)
        
        return resultado
    except Exception as e:
        print(f"‚ùå Error en OpenStreetMap: {e}")
        return f"Error: {e}"
    
def weather_forecast(latitude: float, longitude: float, forecast_days: int = 3):
    try:
        forecast_data = get_weather_forecast(latitude, longitude, forecast_days)

        print(f"\üìà Open-Meteo")
        print(f"üìç Coordenadas: {latitude}, {longitude}")
        print("="*50)
        print(forecast_data)
        
        return forecast_data
    except Exception as e:
        print(f"‚ùå Error en Open Meteo: {e}")
        return f"Error: {e}"

if __name__ == "__main__":
    # Prueba r√°pida del sistema simplificado
    print("üî• SISTEMA DE GU√çAS TUR√çSTICAS")
    print("ü§ñ 2 Agentes CrewAI + Rat√≥n P√©rez")
    print("="*50)
    
    # Cargar LLM y vectorstore
    llm = crear_llm_gemini()
    vectorstore = cargar_vectorstore()
    
    if llm and vectorstore:
        resultado = main(
            user_query="Qu√© ver en el Parque del Retiro",
            llm=llm,
            vectorstore=vectorstore,
            lat=40.4152,
            lon=-3.6844,
            radio_km=1.0
        )
        print("\nüéØ RESULTADO FINAL:")
        print(resultado)
    else:
        print("‚ùå Error: No se pudo inicializar LLM o vectorstore")
